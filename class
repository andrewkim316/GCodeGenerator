import sympy
from sympy import symbols
t = symbols('t')

class gCodeGen():
    def __init__(self,fx,fy,fz,dur,ts):
        # Initializes a "gCodeGen" object with 5 variables: 3 input trajectories with reliance on time, a duration, and a timestep
        self.x = fx
        self.y = fy
        self.z = fz
        self.d = dur
        self.time = ts
    
    def changeTimestep(self,ts):
        # Changes the timestep to the input parameter ts
        self.time = ts
  
    def offset(self,off):
        # Offsets the trajectories by a certain factor
        self.x += off
        self.y += off
        self.z += off
  
    def scale(self,s):
        # Scales the trajectories by a certain factor
        self.x *= s
        self.y *= s
        self.z *= s
    
    def setZero(self):
        # Sets the current position to X0 Y0 Z0
        return "N1 G92"
    
    def check(self):
        # Checks whether or not the code will be out of bounds
        rx = 550
        ry = 550
        rz = 150
        runningTime = self.time
        for l in range(int(self.d/self.time)):
            newX = str(self.x.subs(t,runningTime))
            newY = str(self.y.subs(t,runningTime))
            newZ = str(self.z.subs(t,runningTime))
            runningTime+=self.time
            if(float(newZ) < 0 or float(newY) < 0 or float(newX) < 0 or float(newZ) > rz or float(newY) > ry or float(newX) > rx):
                print ("Error! Code be out o' bounds (X" + newX + " Y" + newY + " Z" + newZ + ").")
                return False
                break;
        print ("Code be runnable!")
        return True
    
    def generator(self,m):
        # Generates G-Code based off the 3 input trajectories, the given timestep, and the given duration.  If m is true, the G-code will be in mm.  If false, it will be in inches.
        out = ""
        runningTime = self.time
        if(m):
            out+= "N1 G21\n"
        else:
            out+= "N1 G22\n"
        for l in range(int(self.d/self.time)):
            newX = str(self.x.subs(t,runningTime))
            newY = str(self.y.subs(t,runningTime))
            newZ = str(self.z.subs(t,runningTime))
            runningTime+=self.time
            out+="N"+str(l+2)+" X"+newX+" Y"+newY+" Z"+newZ+"\n"
        return out
    
    def origin(self):
        # Returns to the origin point
        return "N1 X0 Y0 Z0"

    def execute(self,file):
        # Checks whether the code is runnable.  If it is, the G-Code is written to the specified file name parameter.
        if(self.check()):
            file = open(file,"w")
            file.write(self.generator())
            file.close()
            print("Yer code be written!")
        else:
            print("Ye fool!  Yer code be out o' bounds!")

    def inToMm(self):
        # Scales from inches to millimeters
        self.x /= 25.4
        self.y /= 25.4
        self.z /= 25.4

    def mmToIn(self):
        # Scales from millimeters to inches
        self.x *= 25.4
        self.y *= 25.4
        self.z *= 25.4

    def scaleToReal(self,m):
        # Scales a unit trajectory (0 to 1) to the limits of the X-Carve
        self.x *= 550
        self.y *= 550
        self.z *= 150
        if(not m):
            self.mmToIn()

# Tests the functions
xc = gCodeGen(6*t+82.550,5*t+105.410,0*t+31.496,40,0.1)
xc.scale(1)
xc.execute("TextFile1")
